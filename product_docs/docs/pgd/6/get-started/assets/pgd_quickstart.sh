#!/bin/bash
# This script will unpack embedded files directly into the current working directory.
# Designed for 'curl ... | bash' execution.

# Exit immediately if a command exits with a non-zero status.
# Pipefail ensures that a pipeline's return status is the value of the last (rightmost) command
# to exit with a non-zero status, or zero if all commands in the pipeline exit successfully.
set -eo pipefail

echo "Starting PGD Docker Quickstart unpacker (via curl | bash)..."
echo ""
echo "============================================================================"
echo "WARNING: Files will be extracted directly into your current directory: '$(pwd)'"
echo "         This process requires the current directory to be EMPTY."
echo "         Affected files: Dockerfile.pge, docker-compose.yml, docker-entrypoint.sh, pgdqs.sh" # <--- UPDATED list
echo "============================================================================"
echo ""

# --- Check if current directory is empty ---
# 'ls -A .' lists all files and directories except '.' and '..'
if [ -n "$(ls -A .)" ]; then
    echo "Error: The current directory '$(pwd)' is NOT empty." >&2
    echo "       Please run this script from an empty directory to prevent accidental overwrites." >&2
    echo "       Aborting extraction." >&2
    exit 1
fi

echo "Current directory is empty. Proceeding with extraction."
echo "" # Newline for readability

# --- No temporary directory creation or 'cd' operations here ---
# Files will be extracted directly into the current working directory.

echo "Extracting embedded files..."

# --- Embedded Data Decoding and Extraction ---
# Each file's content is base64 encoded and embedded here as a here-document.

echo "  Extracting Dockerfile.pge..."
base64 -d <<'EOF_DOCKERFILE_PGE_' > "Dockerfile.pge"
RlJPTSBkZWJpYW4KClJVTiBhcHQtZ2V0IHVwZGF0ZSAteSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgY3VybAoKQVJHIEVEQl9TVUJTQ1JJUFRJT05fVE9LRU49IiIKClJVTiBjdXJsIC0xc0xmICJodHRwczovL2Rvd25sb2Fkcy5lbnRlcnByaXNlZGIuY29tLyR7RURCX1NVQlNDUklQVElPTl9UT0tFTn0vc3RhZ2luZy9zZXR1cC5kZWIuc2giIHwgYmFzaApSVU4gY3VybCAtMXNMZiAiaHR0cHM6Ly9kb3dubG9hZHMuZW50ZXJwcmlzZWRiLmNvbS8ke0VEQl9TVUJTQ1JJUFRJT05fVE9LRU59L3N0YWdpbmdfZW50ZXJwcmlzZS9zZXR1cC5kZWIuc2giIHwgYmFzaApSVU4gY3VybCAtMXNMZiAiaHR0cHM6Ly9kb3dubG9hZHMuZW50ZXJwcmlzZWRiLmNvbS8ke0VEQl9TVUJTQ1JJUFRJT05fVE9LRU59L3N0YWdpbmdfcG9zdGdyZXNfZGlzdHJpYnV0ZWQvc2V0dXAuZGViLnNoIiB8IGJhc2gKClJVTiBhcHQtZ2V0IHVwZGF0ZSAteSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgZWRiLXBvc3RncmVzZXh0ZW5kZWQtMTcgZWRiLXBnZDYtZXNzZW50aWFsLXBnZXh0ZW5kZWQxNyAKUlVOIGFwdC1nZXQgaW5zdGFsbCBqcSAteQoKUlVOIG1rZGlyIC1wIC92YXIvbGliL3Bvc3RncmVzcWwKCkNPUFkgLi9kb2NrZXItZW50cnlwb2ludC5zaCAvdmFyL2xpYi9wb3N0Z3Jlc3FsLwoKUlVOIGNob3duIC1SIHBvc3RncmVzOnBvc3RncmVzIC92YXIvbGliL3Bvc3RncmVzcWwKCgpSVU4gbWtkaXIgLXAgL2V0Yy9lZGIvcGdkLWNsaQoKUlVOIGNob3duIC1SIHBvc3RncmVzOnBvc3RncmVzIC9ldGMvZWRiL3BnZC1jbGkvCgoKVk9MVU1FIC92YXIvbGliL3Bvc3RncmVzcWwvZGF0YQoKRU5WIFBBVEg9Ii91c3IvbGliL2VkYi1wZ2UvMTcvYmluOiR7UEFUSH0iCkVOViBQR0RBVEE9Ii92YXIvbGliL2VkYi1wZ2UvMTcvZGF0YSIKVVNFUiBwb3N0Z3JlcwoKQ01EIFsiL3Zhci9saWIvcG9zdGdyZXNxbC9kb2NrZXItZW50cnlwb2ludC5zaCJdCg==
EOF_DOCKERFILE_PGE_
echo "  Extracting docker-compose.yml..."
base64 -d <<'EOF_DOCKER_COMPOSE_YML_' > "docker-compose.yml"
c2VydmljZXM6CiAgaG9zdC0xOgogICAgaG9zdG5hbWU6IGhvc3QtMQogICAgaW1hZ2U6IHBnZAogICAgZW52aXJvbm1lbnQ6CiAgICAgIFBHUEFTU1dPUkQ6IHNlY3JldAogICAgICBQR0RfSk9JTl9OT0RFX0RTTjogInBvcnQ9NTQzMiBkYm5hbWU9cGdkZGIgaG9zdD1ob3N0LTEgdXNlcj1wb3N0Z3JlcyIKICAgIHJlc3RhcnQ6IGFsd2F5cwogICAgdm9sdW1lczoKICAgICAgLSAuL2hvc3QtMS1kYXRhOi92YXIvbGliL2VkYi1wZ2UvMTcvZGF0YQoKICBob3N0LTI6CiAgICBob3N0bmFtZTogaG9zdC0yCiAgICBleHRlbmRzOiBob3N0LTEKICAgIHZvbHVtZXM6CiAgICAgLSAuL2hvc3QtMi1kYXRhOi92YXIvbGliL2VkYi1wZ2UvMTcvZGF0YQoKICBob3N0LTM6CiAgICBob3N0bmFtZTogIGhvc3QtMwogICAgZXh0ZW5kczogaG9zdC0xCiAgICBwb3J0czoKICAgICAgLSAiNjQzMjo2NDMyIgogICAgICAtICI2NDMzOjY0MzMiCiAgICAgIC0gIjY0MzQ6NjQzNCIKICAgIHZvbHVtZXM6CiAgICAgLSAuL2hvc3QtMy1kYXRhOi92YXIvbGliL2VkYi1wZ2UvMTcvZGF0YQoK
EOF_DOCKER_COMPOSE_YML_
echo "  Extracting docker-entrypoint.sh..."
base64 -d <<'EOF_DOCKER_ENTRYPOINT_SH_' > "docker-entrypoint.sh"
IyEvdXNyL2Jpbi9lbnYgYmFzaAojIFRoaXMgdmVyc2lvbiB3aWxsIGFzc3VtZSB0aGF0IGl0IGlzIFBHRQpzZXQgLWV1CgpQR0RfSU5JVElBTF9OT0RFX0NPVU5UPSIke1BHRF9JTklUSUFMX05PREVfQ09VTlQ6LTN9IgpQR0RfSE9TVF9OQU1FPSIke1BHRF9IT1NUX05BTUU6LSQoY2F0IC9ldGMvaG9zdG5hbWUgfCB4YXJncyl9IgpQR0RfTk9ERV9OQU1FPSIke1BHRF9OT0RFX05BTUU6LSQoY2F0IC9ldGMvaG9zdG5hbWUgfCB4YXJncyB8IHNlZCBzL2hvc3QtL25vZGUtLyl9IgpQR0RfTk9ERV9HUk9VUD0iJHtQR0RfTk9ERV9HUk9VUDotZ3JvdXAtMX0iClBHRF9DTFVTVEVSX05BTUU9IiR7UEdEX0NMVVNURVJfTkFNRTotcGdkfSIKClBPU1RHUkVTX0RCPSIke1BPU1RHUkVTX0RCOi1wZ2RkYn0iClBPU1RHUkVTX1VTRVI9IiR7UE9TVEdSRVNfVVNFUjotcG9zdGdyZXN9IgpQR0RBVEE9IiR7UEdEQVRBOi0vdmFyL2xpYi9lZGItcGdlLzE3L21haW4vfSIKUEdMT0dGSUxFPSIke1BHTE9HRklMRTotL3Zhci9saWIvZWRiLXBnZS8xNy9sb2dmaWxlfSIKCmVjaG8gIkNvbmZpZ3VyaW5nICR7UEdEX05PREVfTkFNRX0gKCR7UEdEX0hPU1RfTkFNRX0pIgoKUEdfUEdEX0NMSV9DT05GX0NPTlRFTlRTPScKY2x1c3RlcjoKICBuYW1lOiBwZ2QKICBlbmRwb2ludHM6CiAgICAtIGhvc3Q9aG9zdC0xIGRibmFtZT1wZ2RkYiBwb3J0PTU0MzIKICAgIC0gaG9zdD1ob3N0LTIgZGJuYW1lPXBnZGRiIHBvcnQ9NTQzMgogICAgLSBob3N0PWhvc3QtMyBkYm5hbWU9cGdkZGIgcG9ydD01NDMyCicKCiMgVGhpcyB3aWxsIGJlIHVzZWQgYnkgYHBnZCBub2RlIHNldHVwYC4KZXhwb3J0IFBHUEFTU1dPUkQ9IiR7UEdQQVNTV09SRDotJFBPU1RHUkVTX1BBU1NXT1JEfSIKCmVjaG8gIiRQR19QR0RfQ0xJX0NPTkZfQ09OVEVOVFMiID4gL2V0Yy9lZGIvcGdkLWNsaS9wZ2QtY2xpLWNvbmZpZy55bWwKCgppZiAhIFsgLXMgIiRQR0RBVEEvUEdfVkVSU0lPTiIgXTsgdGhlbgogICAgZWNobyAiUHJvdmlzaW9uaW5nIFBvc3RncmVzLiIKCiAgICBQUklNQVJZPSdmYWxzZScKICAgIGNhc2UgIiRQR0RfSk9JTl9OT0RFX0RTTiIgaW4KCSoiIGhvc3Q9JFBHRF9IT1NUX05BTUUgIiogfCAiaG9zdD0kUEdEX0hPU1RfTkFNRSAiKiB8ICoiIGhvc3Q9JFBHRF9IT1NUX05BTUUiKQoKCSAgICBQUklNQVJZPSd0cnVlJwoJICAgIDs7CiAgICBlc2FjCgogICAgaWYgWyAkUFJJTUFSWSA9ICd0cnVlJyBdOyB0aGVuCgllY2hvICJQcm92aXNpb25pbmcgUEdEIG5vZGUgYW5kIG5ldyBncm91cC4iCglwZ2Qgbm9kZSAiJFBHRF9OT0RFX05BTUUiIHNldHVwIC0tdmVyYm9zZSBcCgkgICAgLS1kc24gIiRQR0RfSk9JTl9OT0RFX0RTTiIgXAoJICAgIC0tbGlzdGVuLWFkZHIgIiRQR0RfSE9TVF9OQU1FLGxvY2FsaG9zdCIgXAoJICAgIC0taW5pdGlhbC1ub2RlLWNvdW50ICIkUEdEX0lOSVRJQUxfTk9ERV9DT1VOVCIgXAoJICAgIC0tcGdkYXRhICIkUEdEQVRBIiBcCgkgICAgLS1sb2ctZmlsZSAiJFBHTE9HRklMRSIgXAoJICAgIC0tY2x1c3Rlci1uYW1lICIkUEdEX0NMVVNURVJfTkFNRSIgXAoJICAgIC0tZ3JvdXAtbmFtZSAiJFBHRF9OT0RFX0dST1VQIiAKCiAgICBlbHNlCgllY2hvICJQcm92aXNpb25pbmcgUEdEIG5vZGUgdG8gam9pbiBleGlzdGluZyBncm91cC4iCgoJIyBJbiBjYXNlIHdlIG5lZWQgdG8gZG8gY2xlYW51cC4KCXBzcWwgIiRQR0RfSk9JTl9OT0RFX0RTTiIgLWMgJ1NFTEVDVCBiZHIucnVuX29uX2FsbF9ub2RlcygkJCBTRUxFQ1QgYmRyLmRyb3Bfbm9kZSgnIickUEdEX05PREVfTkFNRSciJywgZm9yY2UgOj0gdHJ1ZSkgJCQpOycKCglwZ2Qgbm9kZSAiJFBHRF9OT0RFX05BTUUiIHNldHVwIC0tdmVyYm9zZSBcCgkgICAgLS1kc24gImhvc3Q9JFBHRF9IT1NUX05BTUUgcG9ydD01NDMyIGRibmFtZT0kUE9TVEdSRVNfREIgdXNlcj0kUE9TVEdSRVNfVVNFUiIgXAoJICAgIC0tbGlzdGVuLWFkZHIgIiRQR0RfSE9TVF9OQU1FLGxvY2FsaG9zdCIgXAoJICAgIC0tcGdkYXRhICIkUEdEQVRBIiBcCgkgICAgLS1sb2ctZmlsZSAiJFBHTE9HRklMRSIgXAoJICAgIC0tY2x1c3Rlci1kc24gIiRQR0RfSk9JTl9OT0RFX0RTTiIgXAoJICAgIC0tZ3JvdXAtbmFtZSAiJFBHRF9OT0RFX0dST1VQIiBcCgkgICAgLS1jbHVzdGVyLW5hbWUgIiRQR0RfQ0xVU1RFUl9OQU1FIiB8fCAocm0gLXJmICIkUEdEQVRBIiAmJiBleGl0IDEpCiAgICBmaQpmaQoKcGdfY3RsIC1EICIkUEdEQVRBIiBzdG9wIHx8IGVjaG8gIlBvc3RncmVzIG5vdCBydW5uaW5nIgoKZXhlYyBwb3N0Z3JlcyAtRCAiJFBHREFUQSIK
EOF_DOCKER_ENTRYPOINT_SH_
echo "  Extracting pgdqs.sh..."
base64 -d <<'EOF_PGDQS_SH_' > "pgdqs.sh"
IyEvYmluL2Jhc2gKIyBwZ2Rxcy5zaCAtIFBHRCBRdWlja3N0YXJ0IFV0aWxpdHkgU2NyaXB0CiMgVGhpcyBzY3JpcHQgcHJvdmlkZXMgY29tbWFuZHMgZm9yIGJ1aWxkaW5nLCBzdGFydGluZywgc3RvcHBpbmcsCiMgYW5kIGludGVyYWN0aW5nIHdpdGggdGhlIFBHRCBEb2NrZXIgZW52aXJvbm1lbnQuCgojIEV4aXQgaW1tZWRpYXRlbHkgaWYgYSBjb21tYW5kIGV4aXRzIHdpdGggYSBub24temVybyBzdGF0dXMuCnNldCAtZW8gcGlwZWZhaWwKCiMgLS0tIFV0aWxpdHkgRnVuY3Rpb25zIC0tLQoKY29tbWFuZF9leGlzdHMgKCkgewogICAgY29tbWFuZCAtdiAiJDEiID4vZGV2L251bGwgMj4mMQp9CgpjaGVja19kb2NrZXIoKSB7CiAgICBpZiAhIGNvbW1hbmRfZXhpc3RzIGRvY2tlcjsgdGhlbgogICAgICAgIGVjaG8gIkVycm9yOiBEb2NrZXIgaXMgbm90IGluc3RhbGxlZCBvciBub3QgaW4gUEFUSC4iID4mMgogICAgICAgIGVjaG8gIlBsZWFzZSBpbnN0YWxsIERvY2tlciB0byBwcm9jZWVkLiIgPiYyCiAgICAgICAgcmV0dXJuIDEKICAgIGZpCiAgICBlY2hvICIgIERvY2tlciBmb3VuZC4iCiAgICByZXR1cm4gMAp9CgpjaGVja19kb2NrZXJfY29tcG9zZSgpIHsKICAgIGlmICEgZG9ja2VyIGNvbXBvc2UgdmVyc2lvbiA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICAgICBlY2hvICJFcnJvcjogRG9ja2VyIENvbXBvc2UgKHYyIG9yIG5ld2VyKSBpcyBub3QgaW5zdGFsbGVkIG9yIG5vdCBpbiBQQVRILiIgPiYyCiAgICAgICAgZWNobyAiUGxlYXNlIGluc3RhbGwgRG9ja2VyIENvbXBvc2UgdG8gcHJvY2VlZC4iID4mMgogICAgICAgIHJldHVybiAxCiAgICBmaQogICAgZWNobyAiICBEb2NrZXIgQ29tcG9zZSBmb3VuZC4iCiAgICByZXR1cm4gMAp9CgpjaGVja19zdWJzY3JpcHRpb25fdG9rZW4oKSB7CiAgICBpZiBbIC16ICIkRURCX1NVQlNDUklQVElPTl9UT0tFTiIgXTsgdGhlbgogICAgICAgIGVjaG8gIkVycm9yOiBFREJfU1VCU0NSSVBUSU9OX1RPS0VOIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBzZXQuIiA+JjIKICAgICAgICBlY2hvICJQbGVhc2Ugc2V0IHRoaXMgdmFyaWFibGUgKGUuZy4sIGV4cG9ydCBFREJfU1VCU0NSSVBUSU9OX1RPS0VOPSd5b3VyX3Rva2VuJykgYmVmb3JlIHJ1bm5pbmcgdGhlIGNvbW1hbmQuIiA+JjIKICAgICAgICByZXR1cm4gMQogICAgZmkKICAgIGVjaG8gIiAgRURCX1NVQlNDUklQVElPTl9UT0tFTiBpcyBzZXQuIgogICAgcmV0dXJuIDAKfQoKIyAtLS0gQ29tbWFuZHMgLS0tCgpjbWRfYnVpbGQoKSB7CiAgICBlY2hvICJSdW5uaW5nICdidWlsZCcgY29tbWFuZDogQ2hlY2tpbmcgZW52aXJvbm1lbnQgYW5kIGJ1aWxkaW5nIFBHRCBEb2NrZXIgaW1hZ2UuLi4iCiAgICBlY2hvICJQZXJmb3JtaW5nIHN5c3RlbSBjaGVja3MuLi4iCgogICAgY2hlY2tfZG9ja2VyIHx8IHJldHVybiAxCiAgICBjaGVja19kb2NrZXJfY29tcG9zZSB8fCByZXR1cm4gMQogICAgY2hlY2tfc3Vic2NyaXB0aW9uX3Rva2VuIHx8IHJldHVybiAxCgogICAgZWNobyAiQWxsIGNoZWNrcyBwYXNzZWQuIEJ1aWxkaW5nIERvY2tlciBpbWFnZSAncGdkJyBmcm9tIERvY2tlcmZpbGUucGdlLi4uIgoKICAgICMgVGhlICcuJyBjb250ZXh0IHJlZmVycyB0byB0aGUgY3VycmVudCBkaXJlY3RvcnkKICAgIGRvY2tlciBidWlsZCAtZiBEb2NrZXJmaWxlLnBnZSAtLWJ1aWxkLWFyZyBFREJfU1VCU0NSSVBUSU9OX1RPS0VOPSIkRURCX1NVQlNDUklQVElPTl9UT0tFTiIgLXQgcGdkIC4KCiAgICBCVUlMRF9TVEFUVVM9JD8KICAgIGlmIFsgJEJVSUxEX1NUQVRVUyAtZXEgMCBdOyB0aGVuCiAgICAgICAgZWNobyAiRG9ja2VyIGltYWdlICdwZ2QnIGJ1aWx0IHN1Y2Nlc3NmdWxseSEiCiAgICBlbHNlCiAgICAgICAgZWNobyAiRXJyb3I6IERvY2tlciBpbWFnZSBidWlsZCBmYWlsZWQuIEV4aXQgY29kZTogJEJVSUxEX1NUQVRVUyIgPiYyCiAgICBmaQogICAgcmV0dXJuICRCVUlMRF9TVEFUVVMKfQoKY21kX3N0YXJ0KCkgewogICAgZWNobyAiUnVubmluZyAnc3RhcnQnIGNvbW1hbmQ6IFN0YXJ0aW5nIERvY2tlciBDb21wb3NlIHNlcnZpY2VzLi4uIgogICAgZWNobyAiUGVyZm9ybWluZyBzeXN0ZW0gY2hlY2tzIGZvciBzdGFydC4uLiIKCiAgICBjaGVja19kb2NrZXIgfHwgcmV0dXJuIDEKICAgIGNoZWNrX2RvY2tlcl9jb21wb3NlIHx8IHJldHVybiAxCgogICAgaWYgWyAhIC1mICJkb2NrZXItY29tcG9zZS55bWwiIF07IHRoZW4KICAgICAgICBlY2hvICJFcnJvcjogJ2RvY2tlci1jb21wb3NlLnltbCcgbm90IGZvdW5kIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeS4iID4mMgogICAgICAgIGVjaG8gIlBsZWFzZSBlbnN1cmUgeW91IGFyZSBpbiB0aGUgY29ycmVjdCBkaXJlY3Rvcnkgd2hlcmUgZmlsZXMgd2VyZSBleHRyYWN0ZWQuIiA+JjIKICAgICAgICByZXR1cm4gMQogICAgZmkKCiAgICBkb2NrZXIgY29tcG9zZSB1cCAtZAogICAgU1RBUlRfU1RBVFVTPSQ/CiAgICBpZiBbICRTVEFSVF9TVEFUVVMgLWVxIDAgXTsgdGhlbgogICAgICAgIGVjaG8gIkRvY2tlciBDb21wb3NlIHNlcnZpY2VzIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5IGluIGRldGFjaGVkIG1vZGUuIgogICAgZWxzZQogICAgICAgIGVjaG8gIkVycm9yOiBEb2NrZXIgQ29tcG9zZSBzZXJ2aWNlcyBmYWlsZWQgdG8gc3RhcnQuIEV4aXQgY29kZTogJFNUQVJUX1NUQVRVUyIgPiYyCiAgICBmaQogICAgcmV0dXJuICRTVEFSVF9TVEFUVVMKfQoKY21kX3N0b3AoKSB7CiAgICBlY2hvICJSdW5uaW5nICdzdG9wJyBjb21tYW5kOiBTdG9wcGluZyBEb2NrZXIgQ29tcG9zZSBzZXJ2aWNlcy4uLiIKICAgIGVjaG8gIlBlcmZvcm1pbmcgc3lzdGVtIGNoZWNrcyBmb3Igc3RvcC4uLiIKCiAgICBjaGVja19kb2NrZXIgfHwgcmV0dXJuIDEKICAgIGNoZWNrX2RvY2tlcl9jb21wb3NlIHx8IHJldHVybiAxCgogICAgaWYgWyAhIC1mICJkb2NrZXItY29tcG9zZS55bWwiIF07IHRoZW4KICAgICAgICBlY2hvICJFcnJvcjogJ2RvY2tlci1jb21wb3NlLnltbCcgbm90IGZvdW5kIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeS4iID4mMgogICAgICAgIGVjaG8gIlBsZWFzZSBlbnN1cmUgeW91IGFyZSBpbiB0aGUgY29ycmVjdCBkaXJlY3Rvcnkgd2hlcmUgZmlsZXMgd2VyZSBleHRyYWN0ZWQuIiA+JjIKICAgICAgICByZXR1cm4gMQogICAgZmkKCiAgICBkb2NrZXIgY29tcG9zZSBkb3duCiAgICBTVE9QX1NUQVRVUz0kPwogICAgaWYgWyAkU1RPUF9TVEFUVVMgLWVxIDAgXTsgdGhlbgogICAgICAgIGVjaG8gIkRvY2tlciBDb21wb3NlIHNlcnZpY2VzIHN0b3BwZWQgYW5kIHJlbW92ZWQgc3VjY2Vzc2Z1bGx5LiIKICAgIGVsc2UKICAgICAgICBlY2hvICJFcnJvcjogRG9ja2VyIENvbXBvc2Ugc2VydmljZXMgZmFpbGVkIHRvIHN0b3AvcmVtb3ZlLiBFeGl0IGNvZGU6ICRTVE9QX1NUQVRVUyIgPiYyCiAgICBmaQogICAgcmV0dXJuICRTVE9QX1NUQVRVUwp9CgpjbWRfcHNxbCgpIHsKICAgIGVjaG8gIlJ1bm5pbmcgJ3BzcWwnIGNvbW1hbmQ6IENvbm5lY3RpbmcgdG8gcGdkZGIgdmlhIGhvc3QtMS4uLiIKICAgIGVjaG8gIlBlcmZvcm1pbmcgc3lzdGVtIGNoZWNrcyBmb3IgcHNxbC4uLiIKCiAgICBjaGVja19kb2NrZXIgfHwgcmV0dXJuIDEKICAgIGNoZWNrX2RvY2tlcl9jb21wb3NlIHx8IHJldHVybiAxCgogICAgaWYgWyAhIC1mICJkb2NrZXItY29tcG9zZS55bWwiIF07IHRoZW4KICAgICAgICBlY2hvICJFcnJvcjogJ2RvY2tlci1jb21wb3NlLnltbCcgbm90IGZvdW5kIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeS4iID4mMgogICAgICAgIGVjaG8gIlBsZWFzZSBlbnN1cmUgeW91IGFyZSBpbiB0aGUgY29ycmVjdCBkaXJlY3Rvcnkgd2hlcmUgZmlsZXMgd2VyZSBleHRyYWN0ZWQuIiA+JjIKICAgICAgICByZXR1cm4gMQogICAgZmkKCiAgICBkb2NrZXIgY29tcG9zZSBleGVjIGhvc3QtMSBwc3FsIHBnZGRiICIkQCIKICAgIFBTUUxfU1RBVFVTPSQ/CiAgICByZXR1cm4gJFBTUUxfU1RBVFVTCn0KCmNtZF9iYXNoKCkgewogICAgZWNobyAiUnVubmluZyAnYmFzaCcgY29tbWFuZDogT3BlbmluZyBhIGJhc2ggc2hlbGwgaW4gaG9zdC0xIGNvbnRhaW5lci4uLiIKICAgIGVjaG8gIlBlcmZvcm1pbmcgc3lzdGVtIGNoZWNrcyBmb3IgYmFzaC4uLiIKCiAgICBjaGVja19kb2NrZXIgfHwgcmV0dXJuIDEKICAgIGNoZWNrX2RvY2tlcl9jb21wb3NlIHx8IHJldHVybiAxCgogICAgaWYgWyAhIC1mICJkb2NrZXItY29tcG9zZS55bWwiIF07IHRoZW4KICAgICAgICBlY2hvICJFcnJvcjogJ2RvY2tlci1jb21wb3NlLnltbCcgbm90IGZvdW5kIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeS4iID4mMgogICAgICAgIGVjaG8gIlBsZWFzZSBlbnN1cmUgeW91IGFyZSBpbiB0aGUgY29ycmVjdCBkaXJlY3Rvcnkgd2hlcmUgZmlsZXMgd2VyZSBleHRyYWN0ZWQuIiA+JjIKICAgICAgICByZXR1cm4gMQogICAgZmkKCiAgICBkb2NrZXIgY29tcG9zZSBleGVjIGhvc3QtMSBiYXNoICIkQCIKICAgIEJBU0hfU1RBVFVTPSQ/CiAgICByZXR1cm4gJEJBU0hfU1RBVFVTCn0KCiMgLS0tIE1haW4gU2NyaXB0IExvZ2ljIC0tLQoKc2hvd19oZWxwKCkgewogICAgZWNobyAiVXNhZ2U6IHBnZHFzLnNoIDxjb21tYW5kPiIKICAgIGVjaG8gIiIKICAgIGVjaG8gIkNvbW1hbmRzOiIKICAgIGVjaG8gIiAgYnVpbGQgICAgLSBDaGVja3MgZW52aXJvbm1lbnQsIGJ1aWxkcyB0aGUgJ3BnZCcgRG9ja2VyIGltYWdlLiIKICAgIGVjaG8gIiAgc3RhcnQgICAgLSBTdGFydHMgRG9ja2VyIENvbXBvc2Ugc2VydmljZXMgKGRvY2tlciBjb21wb3NlIHVwIC1kKS4iCiAgICBlY2hvICIgIHN0b3AgICAgIC0gU3RvcHMgYW5kIHJlbW92ZXMgRG9ja2VyIENvbXBvc2Ugc2VydmljZXMgKGRvY2tlciBjb21wb3NlIGRvd24pLiIKICAgIGVjaG8gIiAgcHNxbCAgICAgLSBDb25uZWN0cyB0byBwZ2RkYiBvbiBob3N0LTEgdmlhIHBzcWwgKGRvY2tlciBjb21wb3NlIGV4ZWMgaG9zdC0xIHBzcWwgcGdkZGIpLiIKICAgIGVjaG8gIiAgICAgICAgICAgICBBZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGRpcmVjdGx5IHRvIHBzcWwuIgogICAgZWNobyAiICBiYXNoICAgICAtIE9wZW5zIGEgYmFzaCBzaGVsbCBpbiB0aGUgaG9zdC0xIGNvbnRhaW5lciAoZG9ja2VyIGNvbXBvc2UgZXhlYyBob3N0LTEgYmFzaCkuIgogICAgZWNobyAiICAgICAgICAgICAgIEFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwYXNzZWQgZGlyZWN0bHkgdG8gYmFzaC4iCiAgICBlY2hvICIiCiAgICBlY2hvICJOb3RlOiBFbnN1cmUgRURCX1NVQlNDUklQVElPTl9UT0tFTiBpcyBzZXQgZm9yIHRoZSAnYnVpbGQnIGNvbW1hbmQuIgp9CgojIENoZWNrIGZvciBjb21tYW5kIGFyZ3VtZW50CmlmIFsgLXogIiQxIiBdOyB0aGVuCiAgICBlY2hvICJFcnJvcjogTm8gY29tbWFuZCBwcm92aWRlZC4iID4mMgogICAgc2hvd19oZWxwCiAgICBleGl0IDEKZmkKCkNPTU1BTkQ9IiQxIgpzaGlmdCAjIFJlbW92ZSB0aGUgY29tbWFuZCBmcm9tIGFyZ3VtZW50cywgcGFzcyByZW1haW5pbmcgdG8gc3ViY29tbWFuZAoKY2FzZSAiJENPTU1BTkQiIGluCiAgICBidWlsZCkKICAgICAgICBjbWRfYnVpbGQgIiRAIgogICAgICAgIDs7CiAgICBzdGFydCkKICAgICAgICBjbWRfc3RhcnQgIiRAIgogICAgICAgIDs7CiAgICBzdG9wKQogICAgICAgIGNtZF9zdG9wICIkQCIKICAgICAgICA7OwogICAgcHNxbCkKICAgICAgICBjbWRfcHNxbCAiJEAiCiAgICAgICAgOzsKICAgIGJhc2gpCiAgICAgICAgY21kX2Jhc2ggIiRAIgogICAgICAgIDs7CiAgICAtaHwtLWhlbHB8aGVscCkKICAgICAgICBzaG93X2hlbHAKICAgICAgICA7OwogICAgKikKICAgICAgICBlY2hvICJFcnJvcjogVW5rbm93biBjb21tYW5kICckQ09NTUFORCcuIiA+JjIKICAgICAgICBzaG93X2hlbHAKICAgICAgICBleGl0IDEKICAgICAgICA7Owplc2FjCgpleGl0ICQ/Cgo=
EOF_PGDQS_SH_

echo "Files unpacked successfully into the current directory: '$(pwd)'."
echo ""

# Make necessary scripts executable
if [ -f "pgdqs.sh" ]; then # <--- UPDATED to pgdqs.sh
    chmod +x pgdqs.sh
    echo "Made 'pgdqs.sh' executable."
fi
# Assuming docker-entrypoint.sh might also need executable permissions if present
if [ -f "docker-entrypoint.sh" ]; then
    chmod +x docker-entrypoint.sh
    echo "Made 'docker-entrypoint.sh' executable."
fi

echo ""
echo "You can now use the 'pgdqs.sh' command to manage your PGD Docker environment:"
echo ""
echo "  To build the PGD Docker image:"
echo "    export EDB_SUBSCRIPTION_TOKEN=\"YOUR_EDB_TOKEN\""
echo "    ./pgdqs.sh build"
echo ""
echo "  To start the PGD services:"
echo "    ./pgdqs.sh start"
echo ""
echo "  To connect to psql on host-1:"
echo "    ./pgdqs.sh psql"
echo ""
echo "  To get a bash shell on host-1:"
echo "    ./pgdqs.sh bash"
echo ""
echo "  To stop the PGD services:"
echo "    ./pgdqs.sh stop"
echo ""
echo "  For help:"
echo "    ./pgdqs.sh help"
echo ""
echo "Remember to clean up these files manually when you are done. Example:"
echo "  rm Dockerfile.pge docker-compose.yml docker-entrypoint.sh pgdqs.sh" # <--- UPDATED list
echo ""

# The script exits here after printing instructions.
# No automatic cleanup of extracted files as they are in the user's CWD.
