# yaml-language-server: $schema=https://raw.githubusercontent.com/EnterpriseDB/docs/refs/heads/develop/tools/automation/generators/relgen/relnote-schema.json
product: EDB Postgres Distributed
version: 6.0.0
date: 22 May 2025
intro: |
 EDB Postgres Distributed 6.0.0 is a major update to PGD and sees the introduction on Essential and Extended editions.
highlights: |
  - Connection Manager replaces PGD Proxy.
relnotes:
- relnote: Connection Manager replaces PGD Proxy
  details: |
    The connection manager is a new component that replaces the PGD Proxy. It is responsible for managing connections to the database and routing them to the appropriate nodes in the cluster. The connection manager provides improved performance, scalability, and reliability compared to the previous PGD Proxy.
  jira: BDR-5123
  addresses: ""
  type: Feature
  impact: High
- relnote: Table rewriting `ALTER TABLE... ALTER COLUMN` calls are now supported. 
  details: |
    Changing a column's type command which causes the whole table to be rewritten and the change isn't binary coercible is now supported:
    ```sql
    CREATE TABLE foo (c1 int,c2 int, c3 int, c4 box, UNIQUE(c1, c2) INCLUDE(c3,c4));
    ALTER TABLE foo ALTER c1 TYPE bigint; – results into table rewrite
    ```
    This also includes support for `ALTER TYPE` when using the `USING` clause:
    ```sql
    CREATE TABLE foo (id serial primary key,data text);
    ALTER TABLE foo ALTER data TYPE BYTEA USING data::bytea;
    ```
    Table rewrites can hold an AccessExclusiveLock for extended periods on larger tables.  
  jira: BDR-5724
  addresses: ""
  type: Enhancement
  impact: Medium
- relnote: Restrictions on non-immutable `ALTER TABLE... ADD COLUMN` calls have been removed.
  details: |
    The restrictions on non-immutable `ALTER TABLE... ADD COLUMN` calls have been removed.
  jira: BDR-5395
  addresses: ""
  type: Enhancement
  impact: Medium
  
- relnote: Set sequence kind on group create/join
  details: |
    Transform the sequences in distributed based on the `bdr.default_sequence_kind` GUC when creating/joining a bdr group instead of when creating the node as done in older versions.
  jira: BDR-5972
  type: Feature
  impact: High
- relnote: Set startvalue for distributed sequences automatically
  details: |
    Set the startvalue for galloc sequences to the following valid number after the last used by the local sequence. With this change, when creating distributed sequences and specifically galloc, there is no need to adjust the startvalue based on what might be already used.
  jira: BDR-5972
  type: Feature
  impact: High
- relnote: Limit on the number of node groups allowed in the system for PGD Essential.
  details: |
    Ensure that no more than three node groups (one top group and two subgroups) can exist at any given time. If the limit is exceeded, an error is raised.
  jira: BDR-6215
  type: Feature
  impact: Medium
- relnote: Enforce essential limits - data node count
  details: |
    Don't allow Essential builds to join more than 4 data nodes.
  jira: BDR-6213
  type: Feature
  impact: Medium
- relnote: Routing is now enabled by default on subgroups
  details: |
    Routing (and by extension raft) is now enabled by default on data-groups (subgroups with data nodes).
  jira: BDR-4956
  type: Change
  impact: Medium
- relnote: Fixed issue where parting node may belong to a non-existing group
  details: |
    When parting a given node, that same node may have subscriptions whose
    origin was already parted and the group dropped. Previously this would break PGD, and has since been fixed.
  jira: BDR-5461
  type: Bug fix
  impact: Medium
- relnote: Multiple conflicting rows resolution
  details: |
    Both `pk_exists` and `multiple_unique_conflicts` conflict types can now resolve more than one conflicting row by removing any old rows that are part of the conflict. The `multiple_unique_conflicts` now defaults to `update_if_newer` resolver, so it does not throw error by default anymore.
  jira: BDR-6336
  type: Enhancement
  impact: Highest
- relnote: num_writers should be positive or -1
  details: |
    The num_writers option, used in bdr.alter_node_group_option() and bdr.alter_node_group_config() should be positive or -1.
  jira: BDR-6294
  type: Bug fix
  impact: Medium
- relnote: Introduce `bdr.node_group_config_summary` view
  details: |
    The new `bdr.node_group_config_summary` view contains detailed information about group options, including effective value, source of the effective value, default value, whether the value can be inherited, etc. This is in similar spirit to `pg_settings` 
  jira: BDR-4696
  type: Enhancement
  impact: Medium
- relnote: Added bdr.wait_node_confirm_lsn() function which waits until a given reaches a given LSN
  details: |
    bdr.wait_node_confirm_lsn() will look at the confirmed_flush_lsn of the given node when available, otherwise it will query pg_replication_origin_progress() of that node, and wait for the specified LSN to be reached by said node.
  jira: BDR-5200
  type: Feature
  impact: Medium
- relnote: Improved `bdr.stat_activity` view
  details: |
    The `backend_type` now shows consistent worker type for PGD workers without the extra process identification. The `wait_event_type` and `wait_event` include more wait events now, instead of showing "extension" for some events. Also, connection management related columns are added to show real client address/port and whether the session is read-only.
  jira: BDR-4833, BDR-743
  type: Enhancement
  impact: Highest
- relnote: Leader DML lock
  details: |
    New lock type leader DML lock is used by default for locking DDL statements that need to block DML. This lock locks on write-leaders only, no requiring all nodes to participate in the locking operation. Old behavior can be restored by adjusting `bdr.ddl_locking` configuration parameter.
  jira: BDR-6216
  type: Enhancement
  impact: Medium
- relnote: Builtin connection manager
  details: |
    New built-in connection manager which handles routing of connections automatically and allows enforcing of read-only connections to non-leader.
  jira: BDR-6260
  type: Feature
  impact: Highest
- relnote: CLI cluster setup
  details: |
    The PGD CLI now allows initial cluster setup as well as adding nodes from command-line using `pgd node setup` command.
  jira: BDR-5727
  type: Feature
  impact: Highest
- relnote:  Disabling bdr.xact_replication in run_on_* functions
  details: |
    Functions `run_on_nodes`, `run_on_all_nodes` and `run_on_group` now sets `bdr.xact_replication` to `off` by default.
  jira: BDR-1331
  type: Enhancement
  impact: Medium
- relnote: Replica Identity full by default
  details: |
    The `auto` value for `bdr.default_replica_identity` changed to
    REPLICA IDENTITY FULL. This setting prevents some edge cases in
    conflict detection between inserts, updates and deletes across node
    crashes and recovery.
  
    When the PGD group is created and the database of the initial PGD node is not empty (i.e. has some tables with data) the REPLICA IDENTITY of all tables will be set according to `bdr.default_replica_identity`.
  jira: BDR-5977
  type: Enhancement
  impact: Medium
- relnote: The PARTED node is removed  automatically from all nodes in the cluster.
  details: |
    From PGD 6.0.0, bdr.part_node functionality is enhanced to remove the parted node’s  metadata automatically from all nodes in the cluster.
    - For local node, it will remove all the node metadata, including information about remote nodes.
    - For remote node, it removes only metadata for that specific node.
    Hence with this release 
     - A node will remain in PART_CLEANUP state till group slots of all nodes are caught up to all the transactions originating from the PARTED node
     - A node will not remain in PARTED state as the node is removed as soon as it moves to PARTED state. 
  
  jira: BDR-5975
  type: Enhancement
  impact: High
- relnote: Enabling of automatic sync and reconciliation
  details: |
    Link to a detailed google doc is provided below
  jira: BDR-4798
  type: Feature
  impact: High
- relnote: Subscriber-only nodes can now be added to data node groups
  details: |
    So far subscriber-only nodes could only be added to node groups of type "subscriber-only". But now a subscriber-only node can be added to a data node group too. Only node_kind='subscriber_only' needs to be specified while doing a create_node as before. the join_node_group can be done on a data node group.
  jira: BDR-6106
  type: Feature
  impact: Medium
- relnote: Add node_uuid column to bdr.node and bdr.local_node
  details: |
    The node_uuid uniquely identifies instance of a node of a given name. Random node_uuid is generated when node is created and remains constant for the lifetime of the node. The node_id column is now derived from node_uuid instead of node name.
  
    For the time being a node needs to be fully parted before before node of the same name can be rejoined, this may be relaxed in future releases to permit rejoin as soon as part_node process for the old instance has commenced and before it completed.
  
    For the time being upgrades from older PGD versions and mixed-version operation in clusters with older PGD nodes are not supported. This limitation will be addressed in future releases.
  jira:  BDR-6222
  type: Feature
  impact: High
- relnote: Change replication origin and slot naming scheme
  details: |
    Replication origin and slot names now use node uuid and thus correspond to particular incarnation of a node of a given name. Similarly node group uuid is used instead of group name. Hash of database name is used in lieu of database name.
  
    Please note that origin and node names should be treated as opaque identifiers from user's perspective, one shouldn't rely on the structure of these names nor expect these to be particularly meaningful to a human operator.

    The new naming scheme is as follows:
    
    # Slots Naming Convention
  
    | normal slot to a node | `bdr_node_<targetuuid>_<dbhash>` |
    | join slot for node | `bdr_node_<targetuuid>_<dbhash>_tmp` |
    | group slot for a topgroup | `bdr_group_<topgroupuuid>_<dbhash>` |
    | slot for any forwading + lead to lead | `bdr_node_<targetuuid>_<originidhex>_<dbhash>` |
    | analytics slot | `bdr_analytics_<groupuuid>_<dbhash>` |
    | decoding slot | `bdr_decoder_<topgroupuuid>_<dbhash>` |
   
    # Origins Naming Convention:
  
    | normal origin to a node | `bdr_<originuuid>_<dbhash>` |
    | fwd origin to a source node | `bdr_<originuuid>_<sourceoidhex>_<dbhash>` |
  jira: BDR-6157
  type: Feature
  impact: High
- relnote: Add bdr.local_analytics_slot_name() SQL function.
  details: |
    Returns name of analytics slot. This merely produces the correct name irrespective of whether analytics feature is in use.
  jira: BDR-6469
  type: Feature
  impact: Low
- relnote: Add node_uuid column to bdr.node_summary view.
  details: |
    Added to complement the addition of the node_uuid column to bdr.node and bdr.local_node
  jira:  BDR-6478
  type: Feature
  impact: Low
