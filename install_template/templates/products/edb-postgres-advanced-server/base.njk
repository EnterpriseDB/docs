{% extends "platformBase/" + platformBaseTemplate + '.njk' %}
{% set packageName %}edb-as<xx>-server{% endset %}
{% import "platformBase/_deploymentConstants.njk" as deploy %}
{% block frontmatter %}
{# 
  If you modify deployment path here, please first copy the old expression
  and add it to the list under "redirects:" below - this ensures we don't 
  break any existing links.  
#}
deployPath: epas/{{ product.version }}/installing/linux_{{platform.arch}}/epas_{{deploy.map_platform[platform.name]}}.mdx
redirects:
  - epas/{{ product.version }}/epas_inst_linux/installing_epas_using_edb_repository/{{deploy.expand_arch[platform.arch]}}/epas_{{deploy.map_platform_old[platform.name]}}_{{platform.arch | replace(r/_?64/g, "")}}.mdx
{% endblock frontmatter %}
{% block postgresqlalternative %}{% endblock postgresqlalternative %}

{% block installCommand %}
{{super()}}{% block slesoption %}
Where `<xx>` is the version of the EDB Postgres Advanced server you are installing. For example, if you are installing version {{ product.version }}, the package name would be `edb-as{{ product.version }}-server`.

To install an individual component:

```shell
sudo {{packageManager}} -y install <package_name>
```
Where `package_name` can be any of the available packages from the [available package list](/epas/{{ product.version }}/installing/linux_install_details/rpm_packages/).
{% endblock slesoption %}{% endblock installCommand %}

{% block postinstall %}
## Initial configuration
{% block debian_ubuntu %}
This section steps you through getting started with your cluster including logging in, ensuring the installation and initial configuration was successful, connecting to your cluster, and creating the user password. 

First you need to initialize and start the database cluster. The `edb-as-{{ product.version | replace(".", "") }}-setup` script creates a cluster in Oracle-compatible mode with the `edb` sample database in the cluster. To create a cluster in Postgres mode, see [Initializing the cluster in Postgres mode](../linux_install_details/managing_an_advanced_server_installation/#initializing-the-cluster-in-postgres-mode).

```shell
sudo PGSETUP_INITDB_OPTIONS="-E UTF-8" /usr/edb/as{{ product.version }}/bin/edb-as-{{ product.version | replace(".", "") }}-setup initdb

sudo systemctl start edb-as-{{ product.version }}
```{% endblock debian_ubuntu %}

To work in your cluster, login as the enterprisedb user. Connect to the database server using the psql command line client (although you can use a client of your choice with the appropriate connection string). 

```shell
sudo su - enterprisedb

psql edb
```

The server runs with the `peer` or `ident` permission by default. You can change the authentication method by modifying the `pg_hba.conf` file.

Before changing the authentication method, assign a password to the database superuser, enterprisedb. For more information on changing the authentication, see [modifying the pg_hba.conf file](/epas/latest/epas_guide/03_database_administration/01_configuration_parameters/01_setting_new_parameters/#modifying-the-pg_hbaconf-file).

```sql
ALTER ROLE enterprisedb IDENTIFIED BY password;
```

## Experiment

Now you are ready to create and connect to a database, create a table, insert data in a table, and view the data from the table. 

First let's create a database to hold human resource information named `hr` using psql.

```sql
# running in psql 
CREATE DATABASE hr;
__OUTPUT__
CREATE DATABASE
```

Connect to the `hr` database inside psql.

```
\c hr
__OUTPUT__
psql (15.2.0, server 15.2.0)
You are now connected to database "hr" as user "enterprisedb".
```

Create columns to hold department numbers, unique department names, and locations.

```
CREATE TABLE public.dept (deptno numeric(2) NOT NULL CONSTRAINT dept_pk
PRIMARY KEY, dname varchar(14) CONSTRAINT dept_dname_uq UNIQUE, loc
varchar(13));
__OUTPUT__
CREATE TABLE
```

Insert values into the `dept` table.

```
INSERT INTO dept VALUES (10,'ACCOUNTING','NEW YORK');
__OUTPUT__
INSERT 0 1
```

```
INSERT into dept VALUES (20,'RESEARCH','DALLAS');
__OUTPUT__
INSERT 0 1
```

View what is in the table by selecting the values from the table.

```
SELECT * FROM dept;
__OUTPUT__
deptno  |   dname    |   loc
--------+------------+----------
10      | ACCOUNTING | NEW YORK
20      | RESEARCH   | DALLAS
(2 rows)
```

{% endblock postinstall %}